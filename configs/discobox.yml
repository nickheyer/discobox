# Discobox Configuration File
# Production-grade reverse proxy configuration

# Server configuration
listen_addr: ":8080"
read_timeout: 15s
write_timeout: 15s
idle_timeout: 60s
shutdown_timeout: 30s

# TLS configuration
tls:
  enabled: false
  # Manual certificate mode
  cert_file: ""
  key_file: ""
  # Automatic certificate mode (Let's Encrypt)
  auto_cert: false
  domains: []
  email: ""
  min_version: "1.2"  # Minimum TLS version (1.0, 1.1, 1.2, 1.3)

# HTTP/2 configuration
http2:
  enabled: true

# HTTP/3 configuration (experimental)
http3:
  enabled: false
  alt_svc: "h3=\":443\"; ma=86400"

# Transport configuration for backend connections
transport:
  max_idle_conns: 1000
  max_idle_conns_per_host: 100
  max_conns_per_host: 0  # 0 = unlimited
  idle_conn_timeout: 90s
  dial_timeout: 5s
  keep_alive: 30s
  disable_compression: true  # Let the proxy handle compression
  buffer_size: 32768  # 32KB

# Load balancing configuration
load_balancing:
  algorithm: "round_robin"  # Options: round_robin, weighted, least_conn, ip_hash
  sticky:
    enabled: false
    cookie_name: "discobox_session"
    ttl: 24h

# Health checking configuration
health_check:
  interval: 30s
  timeout: 5s
  fail_threshold: 3
  pass_threshold: 2

# Circuit breaker configuration
circuit_breaker:
  enabled: true
  failure_threshold: 5
  success_threshold: 2
  timeout: 60s

# Rate limiting configuration
rate_limit:
  enabled: true
  rps: 1000  # Requests per second
  burst: 2000
  by_header: "X-Real-IP"  # Or "X-Forwarded-For"

# Middleware configuration
middleware:
  # Compression settings
  compression:
    enabled: true
    level: 5  # 1-9, higher = better compression, more CPU
    types:
      - "text/html"
      - "text/css"
      - "text/plain"
      - "text/javascript"
      - "application/javascript"
      - "application/json"
      - "application/xml"
    algorithms:
      - "br"    # Brotli (best compression)
      - "gzip"  # Gzip (most compatible)
      - "zstd"  # Zstandard (good balance)

  # CORS configuration
  cors:
    enabled: false
    allowed_origins:
      - "https://example.com"
      - "https://*.example.com"
    allowed_methods:
      - "GET"
      - "POST"
      - "PUT"
      - "PATCH"
      - "DELETE"
      - "OPTIONS"
    allowed_headers:
      - "Accept"
      - "Authorization"
      - "Content-Type"
      - "X-CSRF-Token"
    allow_credentials: true
    max_age: 300

  # Headers configuration
  headers:
    security: true  # Adds security headers automatically
    custom:
      X-Proxy: "Discobox"
    remove:
      - "Server"
      - "X-Powered-By"

  # Authentication configuration
  auth:
    basic:
      enabled: false
      users:
        # users are handled at runtime, this is just for "bootstrapping" users on startup
        # admin: "hashed_password"
    
    jwt:
      enabled: false
      issuer: ""
      audience: ""
      key_file: ""
    
    oauth2:
      enabled: false
      provider: "google"  # google, github, oidc
      client_id: ""
      client_secret: ""
      redirect_url: ""

# Logging configuration
logging:
  level: "info"  # debug, info, warn, error
  format: "json"  # json, text
  access_logs: true

# Metrics configuration
metrics:
  enabled: true
  path: "/metrics"

# Storage backend configuration
storage:
  type: "sqlite"  # sqlite, memory, etcd
  dsn: "./data/discobox.db"
  prefix: ""  # For etcd

# Admin API configuration
api:
  enabled: true
  addr: ":8081"
  auth: true  # Requires authentication
  api_key: "dev-api-key-12345"  # API key for authentication

# Web UI configuration
ui:
  enabled: true
  path: "/"

# Example services configuration
# These would typically be managed via the API or loaded from storage
services:
  - id: "web-app"
    name: "Web Application"
    endpoints:
      - "http://web-1:80"
      - "http://web-2:80"
    health_path: "/health"
    weight: 1
    max_conns: 100
    timeout: 30s
    strip_prefix: true
    active: true
    metadata:
      environment: "production"
      team: "frontend"

  - id: "api-service"
    name: "API Service"
    endpoints:
      - "http://api-1:3000"
      - "http://api-2:3000"
      - "http://api-3:3000"
    health_path: "/api/health"
    weight: 2
    max_conns: 200
    timeout: 10s
    strip_prefix: false
    active: true
    tls:
      insecure_skip_verify: false
      server_name: "api.internal"
    metadata:
      environment: "production"
      team: "backend"

# Example routes configuration
routes:
  - id: "web-route"
    priority: 100
    host: "example.com"
    path_prefix: "/"
    service_id: "web-app"
    middlewares:
      - "compression"
      - "security-headers"
    metadata:
      description: "Main website"

  - id: "api-route"
    priority: 90
    host: "api.example.com"
    path_prefix: "/v1/"
    service_id: "api-service"
    middlewares:
      - "compression"
      - "cors"
      - "rate-limit"
      - "jwt-auth"
    rewrite_rules:
      - type: "strip_prefix"
        pattern: "/v1"
    metadata:
      description: "API v1 endpoints"

  - id: "admin-route"
    priority: 80
    host: "admin.example.com"
    service_id: "web-app"
    middlewares:
      - "basic-auth"
      - "security-headers"
    metadata:
      description: "Admin panel"
